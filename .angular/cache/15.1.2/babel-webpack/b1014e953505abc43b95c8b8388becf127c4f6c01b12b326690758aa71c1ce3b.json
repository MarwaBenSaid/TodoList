{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://127.0.0.1:3000/todo/';\n  }\n  create(todo) {\n    return this.http.post(this.url + 'add', todo);\n  }\n  all() {\n    return this.http.get(this.url + 'all');\n  }\n  delete(id) {\n    return this.http.delete(this.url + 'del/' + id);\n  }\n  update(id) {\n    return this.http.put(this.url + 'update/' + id, null);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAE1B,QAAG,GAAC,6BAA6B;EAFS;EAI1CC,MAAM,CAACC,IAAS;IACd,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,IAAI,CAACC,GAAG,GAAC,KAAK,EAACF,IAAI,CAAC;EAC5C;EAEAG,GAAG;IACD,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAC,IAAI,CAACF,GAAG,GAAC,KAAK,CAAC;EACtC;EACAG,MAAM,CAACC,EAAO;IACZ,OAAO,IAAI,CAACR,IAAI,CAACO,MAAM,CAAC,IAAI,CAACH,GAAG,GAAC,MAAM,GAAGI,EAAE,CAAC;EAC/C;EACAC,MAAM,CAACD,EAAO;IACZ,OAAO,IAAI,CAACR,IAAI,CAACU,GAAG,CAAC,IAAI,CAACN,GAAG,GAAC,SAAS,GAACI,EAAE,EAAC,IAAI,CAAC;EAClD;;AAlBaV,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAa,SAAXb,WAAW;EAAAc,YAFV;AAAM","names":["DataService","constructor","http","create","todo","post","url","all","get","delete","id","update","put","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\uber\\Desktop\\BootCamp\\Angular\\todolist\\src\\app\\data.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(private http :HttpClient) { }\n  \nurl='http://127.0.0.1:3000/todo/';\n\ncreate(todo: any){\n  return this.http.post(this.url+'add',todo);\n}\n\nall(){\n  return this.http.get(this.url+'all');\n}\ndelete(id: any){\n  return this.http.delete(this.url+'del/' + id);\n}\nupdate(id: any){\n  return this.http.put(this.url+'update/'+id,null);\n}\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}